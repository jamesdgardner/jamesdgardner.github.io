---
title: "ClassNotesLecture14"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
library(tidyverse)
```

The `echo: false` option disables the printing of code (only output is displayed).

### Today we are starting with the first question from Classwork 7

# Q1A: Recreate the R code necessary to generate the following graphs:
```{r}
ggplot(data = mpg,
       mapping =
         aes(x = displ,
             y = hwy)) +
  geom_point(alpha = .3) +
  geom_smooth(se = FALSE)
```
### Q1C - B

Note -> this is how you find out how many unique variable in a specfic data set
```{r}
mpg <- ggplot2::mpg
unique(mpg$drv)
```


```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy, 
                    group = drv), se = FALSE) +
  geom_point(mapping =
               aes(x = displ,
                   y = hwy), alpha = .3)
```
### Q1C - C
```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy, 
                    color = drv), se = FALSE) +
  geom_point(mapping =
               aes(x = displ,
                   y = hwy, color = drv), alpha = .3)
```
##### Or your could also use
```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy,
                     color = drv)) +
  geom_point(alpha = .3) +
  geom_smooth(se = F)
```





### Q1C - D
```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy 
                    ), se = FALSE) +
  geom_point(mapping =
               aes(x = displ,
                   y = hwy, color = drv), alpha = .3)
```
### Q1C - E (Order of GEOMETRIC OBJECTS MATTERS)
```{r}
ggplot(data = mpg, 
       mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(linetype = drv), se = FALSE) +
  geom_point(mapping = aes(color = drv), alpha = .3)
```
### Q1C - F

```{r}
ggplot(data = mpg, mapping =
         aes(x = displ, y = hwy)) +
  geom_point(color = "white", size = 4) +
  geom_point(mapping = aes(color = drv), alpha = .3)
```

### Q1D -
```{r}
organdata_simple <- read_csv('https://bcdanl.github.io/data/organdata_simple.csv')
```
```{r}
ggplot(data = organdata_simple,
       mapping = aes(x = year,
                     y = donors)) +
  geom_line(mapping = aes(group = country)) +
  geom_point()
```
```{r}
ggplot(data = organdata_simple,
       mapping = aes(x = country,
                     y = donors)) +
  geom_boxplot(mapping = aes(color = country)) +
  geom_point()
```
```{r}

ggplot(data = organdata_simple,
       mapping = aes(x = year,
                     y = donors)) +
  geom_line(mapping = aes(group = country)) +
  geom_point() +
  facet_wrap(country ~ .)
```

# Lecture 14 Slides

```{r}
# lets make a simple data frame

ggplot(data = diamonds,
       mapping = aes(x = cut, fill = clarity)) +
  geom_bar()

```




















